// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A project risk analysis AI agent.
 *
 * - analyzeProjectRisks - A function that handles the project risk analysis process.
 * - AnalyzeProjectRisksInput - The input type for the analyzeProjectRisks function.
 * - AnalyzeProjectRisksOutput - The return type for the analyzeProjectRisks function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeProjectRisksInputSchema = z.object({
  projectName: z.string().describe('The name of the project.'),
  description: z.string().describe('A detailed description of the project.'),
  teamMembers: z.array(z.string()).describe('List of team members involved in the project.'),
  startDate: z.string().describe('The start date of the project (YYYY-MM-DD).'),
  deadline: z.string().describe('The project deadline (YYYY-MM-DD).'),
  currentStatus: z.string().describe('The current status of the project (e.g., Planning, In Progress, Blocked, Complete).'),
});
export type AnalyzeProjectRisksInput = z.infer<typeof AnalyzeProjectRisksInputSchema>;

const AnalyzeProjectRisksOutputSchema = z.object({
  risks: z.array(
    z.object({
      risk: z.string().describe('A description of the potential risk.'),
      severity: z.enum(['High', 'Medium', 'Low']).describe('The severity of the risk.'),
      mitigationStrategy: z.string().describe('A suggested strategy to mitigate the risk.'),
    })
  ).describe('A list of potential risks, their severity, and mitigation strategies.'),
  bottlenecks: z.array(
    z.object({
      bottleneck: z.string().describe('A description of the potential bottleneck.'),
      solution: z.string().describe('A suggested solution to address the bottleneck.'),
    })
  ).describe('A list of potential bottlenecks and their solutions.'),
  executiveSummary: z.string().describe('A concise executive summary of the project risks and bottlenecks.'),
});
export type AnalyzeProjectRisksOutput = z.infer<typeof AnalyzeProjectRisksOutputSchema>;

export async function analyzeProjectRisks(input: AnalyzeProjectRisksInput): Promise<AnalyzeProjectRisksOutput> {
  return analyzeProjectRisksFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeProjectRisksPrompt',
  input: {schema: AnalyzeProjectRisksInputSchema},
  output: {schema: AnalyzeProjectRisksOutputSchema},
  prompt: `You are an AI project risk analyst. Analyze the provided project details to identify potential risks and bottlenecks, and provide an executive summary.

Project Name: {{{projectName}}}
Description: {{{description}}}
Team Members: {{#each teamMembers}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}
Start Date: {{{startDate}}}
Deadline: {{{deadline}}}
Current Status: {{{currentStatus}}}

Based on this information, identify potential risks, their severity (High, Medium, Low), and mitigation strategies. Also, identify potential bottlenecks and solutions. Finally, provide a concise executive summary.

Output format: 
{
  "risks": [
    {
      "risk": "Description of the risk",
      "severity": "High/Medium/Low",
      "mitigationStrategy": "Suggested mitigation strategy"
    }
  ],
  "bottlenecks": [
    {
      "bottleneck": "Description of the bottleneck",
      "solution": "Suggested solution"
    }
  ],
  "executiveSummary": "Concise executive summary of the project risks and bottlenecks"
}
`,
});

const analyzeProjectRisksFlow = ai.defineFlow(
  {
    name: 'analyzeProjectRisksFlow',
    inputSchema: AnalyzeProjectRisksInputSchema,
    outputSchema: AnalyzeProjectRisksOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
